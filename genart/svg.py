# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01-svg-helpers.ipynb (unless otherwise specified).

__all__ = ['draw_img', 'vis_graphic', 'draw_background', 'draw_border', 'draw_circle_fill']

# Cell
import cairo

import math
import random

import PIL
from PIL.PngImagePlugin import PngImageFile
from io import BytesIO

import IPython

# Cell
def draw_img(draw_ops, width=500, height=300):
    svgio = BytesIO()

    with cairo.SVGSurface(svgio, width, height) as surface:
        context = cairo.Context(surface)

        for (draw_func, draw_kwargs) in draw_ops:
            draw_func(context, **draw_kwargs)

    return svgio

# Cell
def vis_graphic(img):
    img_type_to_display = {
        PngImageFile: display,
        BytesIO: lambda img: IPython.display.SVG(data=img.getvalue())
    }

    return img_type_to_display[type(img)](img)

# Cell
def draw_background(context, width, height, bkg_r=.3, bkg_g=.3, bkg_b=.3):
    context.set_source_rgb(bkg_r, bkg_g, bkg_b)
    context.rectangle(0, 0, width, height)
    context.fill()

# Cell
def draw_border(context, border_size, width, height, bkg_r=243/255, bkg_g=156/255, bkg_b=18/255):
    context.set_source_rgb(bkg_r, bkg_g, bkg_b)
    context.rectangle(0, 0, border_size, height)
    context.rectangle(0, 0, width, border_size)
    context.rectangle(0, height-border_size, width, border_size)
    context.rectangle(width-border_size, 0, border_size, height)
    context.fill()

# Cell
def draw_circle_fill(context, x, y, radius, r, g, b):
    context.set_source_rgb(r, g, b)
    context.arc(x, y, radius, 0, 2*math.pi)
    context.fill()